// <auto-generated />
using System;
using InteractiveMapProject.Data.Db.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InteractiveMapProject.Data.Db.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.Audience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Audience", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("08499b0d-d84e-48fa-ab72-c92b44d970ed"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "0-3 ans"
                        },
                        new
                        {
                            Id = new Guid("dfa30635-f3a7-48c1-9e20-b1ed707e3b7d"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "3-6 ans"
                        },
                        new
                        {
                            Id = new Guid("a704d604-64a4-4744-a6ff-367665f9fb63"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "6-12 ans"
                        },
                        new
                        {
                            Id = new Guid("40583a00-202c-4f3a-84e0-7c694bc54c5c"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "12-18 ans"
                        },
                        new
                        {
                            Id = new Guid("111649a6-d9f0-4eb6-bc3d-d442cc7cb339"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Parents"
                        },
                        new
                        {
                            Id = new Guid("08dd40aa-2914-4c89-8aea-e77690aca330"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Professionnels"
                        });
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.Mission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Mission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fcd87608-d988-4de8-9572-2c57914be44d"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accueil de loisirs"
                        },
                        new
                        {
                            Id = new Guid("85066c22-a3db-463a-822d-a82517f133a1"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Petite enfance"
                        },
                        new
                        {
                            Id = new Guid("e2ff102a-9fc5-452f-8304-713f1d95f265"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Répit"
                        },
                        new
                        {
                            Id = new Guid("5ac71f7a-a45e-4a6e-bb75-dd6c34dbce8d"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accueil occasionnel"
                        },
                        new
                        {
                            Id = new Guid("b6c80dcb-af30-47e2-a92a-705f31b8e7a2"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Scolarité"
                        },
                        new
                        {
                            Id = new Guid("28abc809-4cc2-4b3d-af91-84d8a253507f"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Référent santé accueil inclusif (RSAI)"
                        },
                        new
                        {
                            Id = new Guid("48251484-af8d-46f0-bfee-7ac003ce4796"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accueil de jour"
                        },
                        new
                        {
                            Id = new Guid("fb389fde-bcde-432b-940f-a5313e544261"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accueil de nuit"
                        },
                        new
                        {
                            Id = new Guid("a924ab04-c9f7-4839-9a43-dbf1e911f0ba"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Soins/santé/réeducation"
                        },
                        new
                        {
                            Id = new Guid("b8af1553-b757-4447-a812-8f54b18ab34e"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accompagnement à la parentalité"
                        },
                        new
                        {
                            Id = new Guid("b6b6eaa0-5bed-4d0a-9b53-f5c28ce107be"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accompagnement administratif"
                        },
                        new
                        {
                            Id = new Guid("5ce9bf4f-5f7e-4da2-9e54-2dc468b21076"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ressource documentaire"
                        },
                        new
                        {
                            Id = new Guid("11794a69-017f-4aac-b149-a45d7414b2fb"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Group de parole/Ateliers"
                        },
                        new
                        {
                            Id = new Guid("a67ef4c6-13d2-46b7-822a-53a37338b19d"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Orientation"
                        },
                        new
                        {
                            Id = new Guid("57dcfb42-63e7-4fad-ae10-c01485392a54"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Prestataire"
                        });
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.PlaceOfIntervention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlaceOfIntervention", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("387770a9-035f-4c9f-a1c8-4a8b5cb6edeb"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Domicile"
                        },
                        new
                        {
                            Id = new Guid("2f00fb03-b808-4787-b587-371564857d92"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "EAJE"
                        },
                        new
                        {
                            Id = new Guid("27e22fd0-f039-4fec-a701-ee526196ebcb"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "École"
                        },
                        new
                        {
                            Id = new Guid("a4c84460-ae1b-401f-bdd1-826d91d0acae"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cabinet"
                        });
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.ProfessionalAudience", b =>
                {
                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AudienceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfessionalId", "AudienceId");

                    b.HasIndex("AudienceId");

                    b.ToTable("ProfessionalAudience", (string)null);
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.ProfessionalMission", b =>
                {
                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfessionalId", "MissionId");

                    b.HasIndex("MissionId");

                    b.ToTable("ProfessionalMission", (string)null);
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.ProfessionalPlaceOfIntervention", b =>
                {
                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlaceOfInterventionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfessionalId", "PlaceOfInterventionId");

                    b.HasIndex("PlaceOfInterventionId");

                    b.ToTable("ProfessionalPlaceOfIntervention", (string)null);
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.Professional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstablishmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagementType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Professionals", (string)null);
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.ProfessionalAudience", b =>
                {
                    b.HasOne("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.Audience", "Audience")
                        .WithMany("Professionals")
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractiveMapProject.Contracts.Entities.Professional", "Professional")
                        .WithMany("Audiences")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.ProfessionalMission", b =>
                {
                    b.HasOne("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.Mission", "Mission")
                        .WithMany("Professionals")
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractiveMapProject.Contracts.Entities.Professional", "Professional")
                        .WithMany("Missions")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mission");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.ProfessionalPlaceOfIntervention", b =>
                {
                    b.HasOne("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.PlaceOfIntervention", "PlaceOfIntervention")
                        .WithMany("Professionals")
                        .HasForeignKey("PlaceOfInterventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractiveMapProject.Contracts.Entities.Professional", "Professional")
                        .WithMany("PlacesOfIntervention")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaceOfIntervention");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.Professional", b =>
                {
                    b.OwnsOne("InteractiveMapProject.Contracts.Entities.Professional.Address#InteractiveMapProject.Contracts.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("Professionals", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");
                        });

                    b.OwnsOne("InteractiveMapProject.Contracts.Entities.Professional.ContactPerson#InteractiveMapProject.Contracts.Entities.ContactPerson", "ContactPerson", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Function")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("PhoneNumber")
                                .HasColumnType("int");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("Professionals", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");
                        });

                    b.OwnsOne("InteractiveMapProject.Contracts.Entities.Professional.Geolocation#InteractiveMapProject.Contracts.Entities.Geolocation", "Geolocation", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("Professionals", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ContactPerson")
                        .IsRequired();

                    b.Navigation("Geolocation")
                        .IsRequired();
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.Audience", b =>
                {
                    b.Navigation("Professionals");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.Mission", b =>
                {
                    b.Navigation("Professionals");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.PlaceOfIntervention", b =>
                {
                    b.Navigation("Professionals");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.Professional", b =>
                {
                    b.Navigation("Audiences");

                    b.Navigation("Missions");

                    b.Navigation("PlacesOfIntervention");
                });
#pragma warning restore 612, 618
        }
    }
}
